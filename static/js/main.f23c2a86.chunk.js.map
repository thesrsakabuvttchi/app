{"version":3,"sources":["Components/data.js","Components/toDoElement.js","Components/button.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItems","document","cookie","cookies","JSON","parse","split","filter","Cookie","startsWith","ToDel","ToDo","state","style","display","margin","textDecoration","clickHandler","bind","prevProps","this","props","setState","push","message","splice","indexOf","del","src","float","onClick","alt","React","Component","Button","Input","getVal","event","target","value","console","log","textAlign","onSubmit","add","type","onChange","App","data","delToDo","addToDo","map","stringify","key","id","length","alert","backgroundColor","height","position","left","width","overflow","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f23c2a86.chunk.js","sourcesContent":["let ToDoItems =[];\n\nif(document.cookie !== '')\n{\n    let cookies =JSON.parse(document.cookie.split(';').filter((Cookie)=>Cookie.startsWith('JSONData'))[0].split('=')[1]) ;\n    ToDoItems =cookies;\n}\n\nlet ToDel = [];\n\nexport {ToDoItems,ToDel};","import React from 'react';\nimport {ToDel} from './data';\n\nclass ToDo extends React.Component{\n\n    constructor(){\n        super();\n        this.state= {style : {display : 'inline', margin : '1rem', textDecoration : 'none'}}\n        this.clickHandler = this.clickHandler.bind(this);\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        if(prevProps.style !== this.props.style)\n            this.setState({display : 'inline', margin : '1rem', textDecoration : 'none'});\n    }\n\n    clickHandler(){\n        if(this.state.style.textDecoration==='none')\n            ToDel.push(this.props.message);\n        else\n            ToDel.splice(ToDel.indexOf(this.props.message),1); \n        this.props.del();\n    }\n\n    render(){\n        return(\n            <li>\n                <p style={this.state.style}>{this.props.message}</p>\n                <img src=\"https://img.icons8.com/metro/26/000000/trash.png\" style={{float:\"right\"}}  onClick={this.clickHandler} alt=''/>\n            </li>\n        );\n    }\n    \n} \n   \nexport default ToDo;","import React from 'react';\n\nvar ButtonStyle ={\n    backgroundColor: '#4CAF50', /* Green */\n    border: 'none',\n    color: 'white',\n    padding: '15px 32px',\n    textAlign: 'center',\n    fontSize: '16px',\n    margin: '5px',\n  }\n\nclass Button extends React.Component{\n\n    constructor()\n    {\n        super();\n        this.state = {Input : ''};\n        this.getVal = this.getVal.bind(this);\n    }\n\n    getVal(event)\n    {\n        this.setState({Input : event.target.value});\n        console.log(this.state.Input);\n    }\n\n    render(){\n        return(\n            <div style={{textAlign : 'center'}}>\n                <form onSubmit={()=>this.props.add(this.state.Input)}>\n                    <input type=\"text\" onChange={this.getVal}/><br/>\n                </form>\n            </div>\n        );\n    }\n\n}\n\nexport default Button;","import React from 'react';\nimport './App.css';\nimport ToDo from './Components/toDoElement';\nimport {ToDoItems,ToDel} from './Components/data';\nimport Button from './Components/button';\n\nclass App extends React.Component {\n\n  constructor()\n  {\n    super();\n    this.state ={\n      data : []\n    };\n    this.delToDo = this.delToDo.bind(this);\n    this.addToDo = this.addToDo.bind(this);\n  }\n\n  delToDo(){\n    ToDel.map( \n        message => {\n            if(ToDoItems.map(data => data.message).indexOf(message)===-1)\n                return(null);\n           return(ToDoItems.splice(ToDoItems.map(data => data.message).indexOf(message),1));\n        }\n    );\n    ToDel.splice(0);\n    document.cookie = \"JSONData=\"+JSON.stringify(ToDoItems)+\"; expires=Fri, 31 Dec 2037 23:59:59 GMT\";\n    this.setState ({data: ToDoItems.map(data => <ToDo message={data.message} key={data.id} del={this.delToDo}/>)});\n  }\n\n  addToDo(message){\n    if(message==='')\n      return(null);\n    else if(ToDoItems.filter(data => data.message===message).length>0){\n      alert('please enter non-duplicate values');\n      return(null);\n    }\n    else if(message.indexOf(';')!== -1){\n      alert('semicolons break the script, pls refrain from using them');\n      return(null);\n    }\n    ToDoItems.push({id: ToDoItems.length<1?1:ToDoItems[ToDoItems.length-1].id+1, message: message});\n    document.cookie = \"JSONData=\"+JSON.stringify(ToDoItems)+\"; expires=Fri, 31 Dec 2037 23:59:59 GMT\";\n    this.setState ({data: ToDoItems.map(data => <ToDo message={data.message} key={data.id} del={this.delToDo}/>)});\n  }\n\n  componentDidMount()\n  {\n    this.setState ({data: ToDoItems.map(data => <ToDo message={data.message} key={data.id} del={this.delToDo}/>)});\n  }\n\n  render(){\n    return (\n      <div style={{backgroundColor: '#12343b',height: '100%', position: 'absolute', left: '0px', width: '100%', overflow: 'auto'}}>\n        <h1 style={{backgroundColor: '#c89666', margin: '0px', padding: '0.5em'}}>\n            To Do List\n        </h1>\n        {ToDoItems.length>0?\n        <ul id = 'box' style={{margin: '1.5em auto', padding: '2em', backgroundColor: '#2d545e'}}>\n          {this.state.data}\n        </ul>\n        :null}\n        <Button add={this.addToDo}/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}