{"version":3,"sources":["Components/data.js","Components/toDoElement.js","Components/button.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItems","document","cookie","cookies","JSON","parse","split","filter","Cookie","startsWith","ToDel","ToDo","state","style","display","margin","textDecoration","width","clickHandler","bind","prevProps","this","props","setState","push","message","splice","indexOf","del","overflowWrap","overflow","padding","alignItems","flex","src","float","onClick","alt","React","Component","InputStyle","backgroundColor","border","textAlign","fontSize","borderRadius","Button","Input","getVal","event","target","value","console","log","onSubmit","add","type","onChange","placeholder","App","data","delToDo","addToDo","map","stringify","key","id","length","alert","height","position","left","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.114bb6ad.chunk.js","sourcesContent":["let ToDoItems =[];\n\nif(document.cookie !== '')\n{\n    let cookies =JSON.parse(document.cookie.split(';').filter((Cookie)=>Cookie.startsWith('JSONData'))[0].split('=')[1]) ;\n    ToDoItems =cookies;\n}\n\nlet ToDel = [];\n\nexport {ToDoItems,ToDel};","import React from 'react';\nimport {ToDel} from './data';\n\nclass ToDo extends React.Component{\n\n    constructor(){\n        super();\n        this.state= {style : {display : 'inline-block', margin : '0.5rem',textDecoration : 'none', width : '85%'}}\n        this.clickHandler = this.clickHandler.bind(this);\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        if(prevProps.style !== this.props.style)\n            this.setState({display : 'inline-block', margin : '0.5rem', textDecoration : 'none'});\n    }\n\n    clickHandler(){\n        if(this.state.style.textDecoration==='none')\n            ToDel.push(this.props.message);\n        else\n            ToDel.splice(ToDel.indexOf(this.props.message),1); \n        this.props.del();\n    }\n\n    render(){\n        return(\n            <li style={{overflowWrap: 'break-word', overflow: 'auto',padding: \"0.5em\", display: \"flex\",alignItems: \"center\"}}>\n                <div style={{overflowWrap: 'break-word', flex: 1}}>\n                    <p style={this.state.style}>{this.props.message}</p>\n                </div>\n                <img src=\"https://img.icons8.com/metro/26/000000/trash.png\" style={{float:\"right\"}}  onClick={this.clickHandler} alt=''/>\n            </li>\n        );\n    }\n    \n} \n   \nexport default ToDo;","import React from 'react';\n\nvar InputStyle ={\n    backgroundColor: '#e1b382',\n    border: '#2d545e 25px solid',\n    padding: '15px 32px',\n    textAlign: 'center',\n    fontSize: '16px',\n    margin: '2em',\n    borderRadius : '5px',\n    width: '60%'\n  }\n\nclass Button extends React.Component{\n\n    constructor()\n    {\n        super();\n        this.state = {Input : ''};\n        this.getVal = this.getVal.bind(this);\n    }\n\n    getVal(event)\n    {\n        this.setState({Input : event.target.value});\n        console.log(this.state.Input);\n    }\n\n    render(){\n        return(\n            <div style={{textAlign : 'center'}}>\n                <form onSubmit={()=>this.props.add(this.state.Input)}>\n                    <input type=\"text\" onChange={this.getVal} style ={InputStyle} placeholder=\"enter To-Do items\"/><br/>\n                </form>\n            </div>\n        );\n    }\n\n}\n\nexport default Button;","import React from 'react';\nimport './App.css';\nimport ToDo from './Components/toDoElement';\nimport {ToDoItems,ToDel} from './Components/data';\nimport Button from './Components/button';\n\nclass App extends React.Component {\n\n  constructor()\n  {\n    super();\n    this.state ={\n      data : []\n    };\n    this.delToDo = this.delToDo.bind(this);\n    this.addToDo = this.addToDo.bind(this);\n  }\n\n  delToDo(){\n    ToDel.map( \n        message => {\n            if(ToDoItems.map(data => data.message).indexOf(message)===-1)\n                return(null);\n           return(ToDoItems.splice(ToDoItems.map(data => data.message).indexOf(message),1));\n        }\n    );\n    ToDel.splice(0);\n    document.cookie = \"JSONData=\"+JSON.stringify(ToDoItems)+\"; expires=Fri, 31 Dec 2037 23:59:59 GMT\";\n    this.setState ({data: ToDoItems.map(data => <ToDo message={data.message} key={data.id} del={this.delToDo}/>)});\n  }\n\n  addToDo(message){\n    if(message==='')\n      return(null);\n    else if(ToDoItems.filter(data => data.message===message).length>0){\n      alert('please enter non-duplicate values');\n      return(null);\n    }\n    else if(message.indexOf(';')!== -1){\n      alert('semicolons break the script, pls refrain from using them');\n      return(null);\n    }\n    ToDoItems.push({id: ToDoItems.length<1?1:ToDoItems[ToDoItems.length-1].id+1, message: message});\n    document.cookie = \"JSONData=\"+JSON.stringify(ToDoItems)+\"; expires=Fri, 31 Dec 2037 23:59:59 GMT\";\n    this.setState ({data: ToDoItems.map(data => <ToDo message={data.message} key={data.id} del={this.delToDo}/>)});\n  }\n\n  componentDidMount()\n  {\n    this.setState ({data: ToDoItems.map(data => <ToDo message={data.message} key={data.id} del={this.delToDo}/>)});\n  }\n\n  render(){\n    return (\n      <div style={{backgroundColor: '#12343b',height: '100%', position: 'absolute', left: '0px', width: '100%', overflow: 'auto'}}>\n        <h1 style={{backgroundColor: '#c89666', margin: '0px', padding: '0.5em'}}>\n            To Do List\n        </h1>\n        {ToDoItems.length>0?\n        <ul id = 'box' style={{margin: '1.5em auto',padding:'1em', backgroundColor: '#2d545e'}}>\n          {this.state.data}\n        </ul>\n        :null}\n        <Button add={this.addToDo}/>\n        <div style={{height:'57%'}}></div>\n        <footer style={{backgroundColor: '#101010', color:'white',float: 'bottom',padding:'2em',width: '100%'}}>\n          copyleft Â© thesrsbuvttchi\n        </footer>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}